/******************************************************************************
 *  Name:    Ed Maphis
 *
 *  Description: Chapter 1.3 exercises.
 *               Conditionals and Loops
 *
  ******************************************************************************/

Ex. 1.3.1   Ans:  ThreeEqual.java

Ex. 1.3.2   Ans:  Quadratic.java

Ex. 1.3.3 What (if anything) is wrong with each of the following statements?
   a.  if (a > b) then c = 0; // then is wrong syntax
   b.  if a > b { c = 0; }    // forgot the () around the boolean expression
   c.  if (a > b) c = 0;      // ok.
   d.  if (a > b) c = 0 else b = 0;  // need semicolon after the c=0 expression

Ex. 1.3.4 Write a code fragment that prints true if the double variables
          x and y are both strictly between 0 and 1, and false otherwise.
    Ans:
        double x = 0.0;
        double y = 0.0;
        if (x >= 0.0 && x <= 1.0 && y >= 0.0 && y <= 1.0)
            System.out.println("true");
        else
            System.out.println("false");

 Ex. 1.3.5   Ans: RollLoadedDie


 Ex. 1.3.7 Suppose that i and j are both of type int. What is the value of j
           after each of the following statements is executed?
     a.  for (i = 0, j = 0; i < 10; i++)  j += i;  => i=10,j=45
     b.  for (i = 0, j = 1; i < 10; i++)  j += j;  => i=10,j=1024
     c.  for (j = 0; j < 10; j++) j += j;          => i=0, j=15
     d.  for (i = 0, j = 0; i < 10; i++) j += j++; => i=10,j=0S

Ex. 1.3.8   Ans: Hellos.java

Ex. 1.3.9   Ans: PrintIntegers.java

Ex. 1.3.10  Ans: UniformIntegers.java

Ex. 1.3.11 Describe what happens when you try to print a ruler function
           (see the table on page 57) with a value of n that is too large,
           such as 100.
            Ans: It doesn't fit on the screen??

Ex. 1.3.12  Ans: FunctionGrowth.java

Ex. 1.3.13 What are the values of m and n after executing the following code?
    int n = 123456789;
    int m = 0;
    while (n != 0) {
       m = (10 * m) + (n % 10);
       n = n / 10;  // reverses the digits.
    }

    ans: n=0 m=987654321

Ex. 1.3.14 What does the following code fragment print?
   int f = 0, g = 1;
   for (int i = 0; i <= 15; i++) {
      System.out.println(f);
      f = f + g;
      g = f - g;
   }
   Solution. Even an expert programmer will tell you that the only way to
   understand a program like this is to trace it. When you do, you will find
   that it prints the values
     0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 134, 233,377, and 610.
   These numbers are the first sixteen of the famous Fibonacci sequence, which
   are defined by the following formulas:
     F0 = 0, F1 = 1, and Fn = Fn-1 + Fn-2 for n > 1.

Ex. 1.3.15 How many lines of output does the following code fragment produce?
      for (int i = 0; i < 999; i++); {
        System.out.println("Hello");
      }
    Solution. One. Note the spurious semicolon at the end of the first line.
    Ans: HaHaHa!!!

Ex. 1.3.16  Ans: PowersOfTwo.java

Ex. 1.3.17  Ans: CompoundInterest.java

Ex. 1.3.18 Unlike the harmonic numbers, the sum 1/12 + 1/22 + ... + 1/n2 does
           converge to a constant as n grows to infinity.
           (Indeed, the constant is pi^2/6, so this formula can be used to
           estimate the value of pi.)
           Which of the following for loops computes this sum?
           Assume that n is an int variable initialized to 1000000 and sum is
           a double variable initialized to 0.0.

        a. for (int i = 1; i <= n; i++) sum += 1 / (i*i);
        // no - overflow
        b. for (int i = 1; i <= n; i++) sum += 1.0 / i*i;
        // no - 1000000.0  - integer division
        c. for (int i = 1; i <= n; i++) sum += 1.0 / (i*i);
        // no - 0.0
        d. for (int i = 1; i <= n; i++) sum += 1 / (1.0*i*i);
        // yes-1.64493306684877
        (Math.PI * Math.PI) / 6.0 => 1.6449340668482264

Ex. 1.3.19 Show that program 1.3.6 implements Newton’s method for finding the
           square root of c.
           Hint : Use the fact that the slope of the tangent to a (differentiable)
           function f (x) at x = t is f'(t) to find the equation of the tangent line,
           and then use that equation to find the point where the tangent line
           intersects the x-axis to show that you can use Newton’s method to find
           a root of any function as follows: at each iteration, replace the
           estimate t by t - f (t) / f'(t).

           while (Math.abs(t - c/t) > EPSILON * t)
           {   // Replace t by the average of t and c/t
               t = (c/t + t) / 2.0;
           }

           TODO:

Ex. 1.3.20  TODO:
